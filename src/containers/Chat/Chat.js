import React, {useEffect, useState, useRef} from 'react';
import {useParams, useHistory} from 'react-router-dom';
import db from '../../firebase/firebase';
import Message from '../Message/Message';
import Button from '@material-ui/core/Button';
import ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';
import InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';
import SendIcon from '@material-ui/icons/Send';
import 'emoji-mart/css/emoji-mart.css';
import {Picker} from 'emoji-mart';
import {useStateValue} from '../Store/StateProvider';
import classes from './Chat.module.css';
import { Avatar } from '@material-ui/core';

const Chat = (props) => {
    const [msgs, setMsgs] = useState();
    const [msg, createMsg] = useState('');
    const [userInfo, setUserInfo] = useState(null);
    const [showPicker, setShowPicker] = useState(false);
    const [setEnableSend, setsetEnableSend] = useState(true);
    const {chatId} = useParams();
    const [{user}] = useStateValue();
    const history = useHistory();
    const messagesEndRef = useRef(null);

    const submitMsg = (event) => {
        event.preventDefault();

        if (setEnableSend) {
            db.collection('chats').doc(chatId).update({
                lastMsg: msg,
                lastMsgTime: new Date()
            })

            db.collection('chats').doc(chatId).collection('msgs').add({
                msg: msg,
                time: new Date(),
                sender: user.displayName,
                senderImg: user.photoURL,
                senderId: user.uid,
                autoGenerated: false
            })
            createMsg('');
        }
    }

    const scrollToBottom = () => {
        messagesEndRef.current.scrollIntoView();
    }

    const backHandler = () => {
        props.msgShowingHandler();
        history.push('/');
    }

    const addEmoji = (emoji) => {
        createMsg(msg + emoji.native);
        setShowPicker(false);
    }

    useEffect(() => {
        if (!msg || !msg.trim()) {
            setsetEnableSend(false);
        } else {
            setsetEnableSend(true);
        }
    }, [msg]);

    useEffect(scrollToBottom, [msgs]);

    useEffect(() => {
        db.collection('chats').doc(chatId)
            .collection('msgs').orderBy('time', 'asc')
                .onSnapshot(snap => {
                    setMsgs(snap.docs.map(doc => {
                        if (!doc.data().autoGenerated) {
                            return {
                                id: doc.id,
                                msg: doc.data().msg,
                                sender: doc.data().sender,
                                senderId: doc.data().senderId,
                                senderImg: doc.data().senderImg,
                                autoGenerated: doc.data().autoGenerated,
                                time: doc.data().time.toDate().toLocaleString("en-CA", {
                                    year: '2-digit',
                                    month: '2-digit',
                                    day: '2-digit',
                                    hour: '2-digit',
                                    minute: '2-digit',
                                    hourCycle: 'h23',
                                    timeZoneName: 'short'
                                })
                            }
                        } else {
                            return {
                                id: doc.id,
                                msg: doc.data().msg,
                                autoGenerated: doc.data().autoGenerated,
                                time: doc.data().time.toDate().toLocaleString("en-CA", {
                                    year: '2-digit',
                                    month: '2-digit',
                                    day: '2-digit',
                                    hour: '2-digit',
                                    minute: '2-digit',
                                    hourCycle: 'h23',
                                    timeZoneName: 'short'
                                })
                            }
                        }
                    }))
                })
    }, [chatId])

    useEffect(() => {
        db.collection('chats').doc(chatId).get().then(doc => {
            if (doc.data().users[0] === user.uid) {
                setUserInfo({
                    name: doc.data().username2,
                    photo: doc.data().photo2
                })
            } else {
                setUserInfo({
                    name: doc.data().username1,
                    photo: doc.data().photo1
                })
            }
        })
    }, [chatId, user.uid])

    let messages = null;
    if (msgs) {
        messages = msgs.map(message => (
                    <Message
                        key={message.id}
                        id={message.id}
                        msg={message.msg}
                        sender={message.sender}
                        senderId={message.senderId}
                        senderImg={message.senderImg}
                        time={message.time}
                        autoGenerated={message.autoGenerated} />
                        ))
    }

    const styleClasses = [classes.Chat];
    if (!props.msgShowing) {
        styleClasses.push(classes.Hidden);
    }

    return (
        <div>
            <div className={classes.TopMenu}>
                <Button
                    className={classes.BackIcon}
                    onClick={backHandler}>
                        <ArrowBackIosIcon
                            fontSize="large" className={classes.BackIconInside} />Chats
                </Button>
                <p>{userInfo?.name}</p>
                <Avatar src={userInfo?.photo} />
            </div>
            <div className={styleClasses.join(' ')}>
                <div className={classes.Messages}>
                    {messages}
                </div>
                <div ref={messagesEndRef} />
                <form className={classes.MsgInput} onSubmit={submitMsg}>
                    <Button onClick={() => setShowPicker(!showPicker)}><InsertEmoticonIcon /></Button>
                    <input
                        type='text'
                        onChange={event => createMsg(event.target.value)}
                        placeholder="Write a message..."
                        value={msg} />
                    <Button
                        onClick={submitMsg}
                        className={classes.Send}
                        disabled={!setEnableSend} > <SendIcon />
                    </Button>
                </form>
            </div>
            <div className={classes.Emoji}>
                {showPicker ? <Picker onSelect={addEmoji} />: null}
            </div>
        </div>
    );
};

export default Chat;